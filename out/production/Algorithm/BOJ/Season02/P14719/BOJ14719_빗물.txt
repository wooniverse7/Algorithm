
유형 : 구현, 시뮬레이션

가로 탐색
 - 입력 받은 값을 2차원 배열로 map을 만들 수 있나
 - 입력받은 값을 배열로 받아 하나씩 꺼내며 왼쪽 위에서부터 아래로 벽을 만듬
 - 벽에서 부터 시작해서 다음 빈 공간이면 계속 탐색
 - 그렇게 한 줄씩 쌓아나간다.
  실패.

  가장 높은 기둥을 기준으로

 - 투 포인터 방식

 1. 우선 블록의 높이를 배열에 입력받은 후, 각 블록마다 왼쪽과 오른쪽의 블록 중 가장 높은 블록의 높이를 구합니다.
 이를 위해 각 블록마다 왼쪽과 오른쪽 블록 중 가장 높은 블록을 찾는 반복문을 실행합니다.
 2. 이후, 현재 블록을 찾은 왼쪽과 오른쪽 블록 중 가장 높은 블록의 높이를 이용해서, 현재 블록 위에 물이 채워질 수 있는 공간이 있는지 확인합니다.
 물이 채워질 수 있는 공간이라면, 현재 블록 위에 채워질 수 있는 물의 높이는 왼쪽과 오른쪽 중 가장 낮은 블록의 높이와 현재 블록의 높이의 차입니다.
 3. 이렇게 각 블록마다 물이 채워질 수 있는 공간의 크기를 구한 후, 모든 블록에서 구한 값의 합을 구하면 최종적으로 벽에 채워질 수 있는 물의 양을 구할 수 있습니다.

  이 값은 answer 변수에 저장됩니다.마지막으로, answer 변수에 저장된 값을 출력하면 문제에서 원하는 결과를 얻을 수 있습니다.


좌우 높이를 활용한 풀이

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        int[] blocks = new int[w];
        for (int i = 0; i < w; i++) {
            blocks[i] = scanner.nextInt();
        }

        int left = 0;
        int right = w - 1;
        int leftMax = blocks[left];
        int rightMax = blocks[right];
        int result = 0;

        while (left < right) {
            leftMax = Math.max(leftMax, blocks[left]);
            rightMax = Math.max(rightMax, blocks[right]);

            if (leftMax <= rightMax) {
                result += leftMax - blocks[left];
                left++;
            } else {
                result += rightMax - blocks[right];
                right--;
            }
        }

        System.out.println(result);
    }
}


/**
 * 스택을 사용해서 풀이
 * 시간 복잡도 O(n)
 *
 */

import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        int[] blocks = new int[w];
        for (int i = 0; i < w; i++) {
            blocks[i] = scanner.nextInt();
        }

        Stack<Integer> stack = new Stack<>();
        int result = 0;

        for (int i = 0; i < w; i++) {
            // 가장 높은 블록
            while (!stack.isEmpty() && blocks[i] > blocks[stack.peek()]) {
                int top = stack.pop();

                if (stack.isEmpty()) {
                    break;
                }

                int distance = i - stack.peek() - 1;
                int height = Math.min(blocks[i], blocks[stack.peek()]) - blocks[top];
                result += distance * height;
            }

            stack.push(i);
        }

        System.out.println(result);
    }
}
